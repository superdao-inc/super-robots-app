version: '3.3'

services:
  db:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - 5432:5432
    networks:
      - app-network

  redis:
    image: redis:6.0.8
    restart: always
    ports:
      - 6379:6379
    networks:
      - app-network

  rabbitmq:
    image: heidiks/rabbitmq-delayed-message-exchange:3.9.13-management
    container_name: 'rabbitmq'
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: superdao
      RABBITMQ_DEFAULT_PASS: superdao
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - app-network

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network

  nginx:
    image: nginx
    volumes:
      - ./dev.conf.template:/etc/nginx/templates/default.conf.template
    environment:
      FRONTEND_HOST: http://host.docker.internal:7998
      BACKEND_HOST: http://host.docker.internal:7999
    ports:
      - "8000:8000"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 2
      KAFKA_CREATE_TOPICS: 'sd-app-transactions:1:1'
    networks:
      - app-network

  kafkaui:
    restart: on-failure
    image: 'docker.redpanda.com/vectorized/console:master-173596f'
    ports:
      - '8686:8080'
    environment:
      - KAFKA_BROKERS=localhost:9092
    networks:
      - app-network
    extra_hosts:
      - 'localhost:host-gateway'
    depends_on:
      kafka:
        condition: service_started

networks:
  app-network:
    driver: bridge

volumes:
  mongo_volume:
  redis_volume:
